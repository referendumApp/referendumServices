services:
  api-base:
    build:
      context: ./data_service
      target: api
    image: api-base
    env_file: .env
    ports:
      - "80:80"
    profiles: ["base"]

  api:
    container_name: api
    image: api
    extends:
      service: api-base
    command:
      [
        "python",
        "-m",
        "uvicorn",
        "api.main:app",
        "--host",
        "0.0.0.0",
        "--port",
        "80",
        "--log-config",
        "None",
      ]
    profiles: ["api"]

  api-local:
    container_name: api-local
    image: api-local
    extends:
      service: api-base
    build:
      context: ./data_service
      target: api-local
    depends_on:
      db:
        condition: service_healthy
      local-db-init:
        condition: service_completed_successfully
      migrations:
        condition: service_completed_successfully
    ports:
      - "5678:5678" # debugger port
      - "6000:6000" # pytest debugger port
    volumes:
      - ./data_service/api:/code/api # mount the api and common directory
      - ./data_service/common:/code/common
    command:
      [
        "python",
        "-m",
        "debugpy",
        "--listen",
        "0.0.0.0:5678",
        "-m",
        "uvicorn",
        "api.main:app",
        "--host",
        "0.0.0.0",
        "--port",
        "80",
        "--reload",
      ]
    profiles: ["local-data", "local-empty"]

  user-api-base:
    build:
      context: ./user_service
      target: builder
      args:
        - GOCACHE=$GOCACHE
        - GOMODCACHE=$GOMODCACHE
        - BINARY_PATH=$BINARY_PATH
    image: user-api-base
    env_file: .env
    environment:
      - AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY
      - AWS_SECRET_ACCESS_KEY=$AWS_SECRET_KEY
    profiles: ["base"]

  user-api:
    container_name: user-api
    image: user-api
    extends:
      service: user-api-base
    build:
      context: ./user_service
      target: user-prod
    ports:
      - "80:80"
    profiles: ["user-api"]

  user-api-local:
    container_name: user-api-local
    image: user-api-local
    extends:
      service: user-api-base
    build:
      context: ./user_service
      target: user-local
    environment:
      - CGO_ENABLED=0
    depends_on:
      db:
        condition: service_healthy
      kms:
        condition: service_healthy
      localstack:
        condition: service_healthy
      dragonfly:
        condition: service_healthy
      local-db-init:
        condition: service_completed_successfully
      migrations:
        condition: service_completed_successfully
      plc:
        condition: service_healthy
    volumes:
      - ./user_service/go.mod:/code/go.mod
      - ./user_service/go.sum:/code/go.sum
      - ./user_service/cmd:/code/cmd
      - ./user_service/internal:/code/internal
      - ./user_service/pkg/common:/code/pkg/common
    ports:
      - "8080:80"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 3s
      start_period: 30s
    profiles: ["local-data", "local-empty", "test"]

  db:
    container_name: db
    image: postgres:13
    env_file: .env
    ports:
      - "${POSTGRES_PORT}:5432"
    command:
      [
        "postgres",
        "-c",
        "log_statement=all",
        "-c",
        "log_destination=stderr",
        "-c",
        "log_min_duration_statement=0",
      ]
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 2s
      timeout: 5s
      retries: 5
    profiles: ["local-data", "local-empty", "test"]

  dragonfly:
    image: docker.dragonflydb.io/dragonflydb/dragonfly
    ulimits:
      memlock: -1
    ports:
      - "6379:6379"
    # For better performance, consider `host` mode instead `port` to avoid docker NAT.
    # `host` mode is NOT currently supported in Swarm Mode.
    # https://docs.docker.com/compose/compose-file/compose-file-v3/#network_mode
    # network_mode: "host"
    volumes:
      - dragonflydata:/data
    command:
      [
        "dragonfly",
        "--cache_mode=true",
        "--maxmemory=1.5gb",
      ]
    profiles: ["local-data", "local-empty", "test"]

  localstack:
    container_name: localstack
    image: localstack/localstack:3.0
    environment:
      - SERVICES=s3,secretsmanager,kms,ses
      - DEBUG=1
      - DOCKER_HOST=unix:///var/run/docker.sock
      - LOCALSTACK_HOST=localstack
      - AWS_DEFAULT_REGION=us-east-1
      - AWS_ACCESS_KEY_ID=test
      - AWS_SECRET_ACCESS_KEY=test
    ports:
      - "4566:4566"
      - "4510-4559:4510-4559"
    volumes:
      - "${TMPDIR:-/tmp}/localstack:/var/lib/localstack"
      - "/var/run/docker.sock:/var/run/docker.sock"
      - ./localstack-init:/etc/localstack/init/ready.d
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4566/_localstack/health"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s
    profiles: ["local-data", "local-empty", "test"]

  kms:
    container_name: kms
    image: kng93/local-kms
    ports:
      - "9002:8080"
    environment:
      - KMS_REGION=$AWS_REGION
      - KMS_ACCOUNT_ID=$KMS_ACCOUNT_ID
    volumes:
      - ./user_service/kms_seed.yaml:/init/seed.yaml
    healthcheck:
      test:
        - "CMD"
        - "curl"
        - "-l"
        - "http://localhost:8080"
        - "-H"
        - "X-Amz-Target: TrentService.ListKeys"
        - "-H"
        - "Content-Type: application/x-amz-json-1.1"
        - "-d"
        - "{}"
      start_period: 3s
      interval: 5s
      timeout: 5s
      retries: 3
    profiles: ["local-data", "local-empty", "test"]

  local-db-init:
    container_name: local_db_init
    build:
      context: ./data_service
      target: local-db-init
    image: local-db-init
    env_file: .env
    depends_on:
      db:
        condition: service_healthy
      localstack:
        condition: service_healthy
    command: ["/code/local_db_init.sh"]
    profiles: ["local-data", "local-empty", "test"]

  migrations:
    build:
      context: ./data_service
      target: migrations
    image: migrations
    env_file: .env
    command: ["alembic", "upgrade", "head"]
    depends_on:
      db:
        condition: service_healthy
      local-db-init:
        condition: service_completed_successfully
    profiles: ["local-data", "local-empty", "test"]

  pipeline:
    container_name: pipeline
    build:
      context: ./data_service
      target: pipeline
    image: pipeline
    depends_on:
      api-local:
        condition: service_started
      user-api-local:
        condition: service_healthy
      db:
        condition: service_healthy
      localstack:
        condition: service_healthy
      local-db-init:
        condition: service_completed_successfully
      migrations:
        condition: service_completed_successfully
    env_file: .env
    profiles: ["local-data"]

  data-test:
    container_name: test
    build:
      context: ./data_service
      target: test
    image: data-test
    depends_on:
      user-api-local:
        condition: service_healthy
      db:
        condition: service_healthy
      localstack:
        condition: service_healthy
      local-db-init:
        condition: service_completed_successfully
      migrations:
        condition: service_completed_successfully
    env_file: .env
    environment:
      - AWS_ACCESS_KEY=test
      - AWS_SECRET_KEY=test
    profiles: ["test"]

  user-test:
    container_name: user-test
    image: user-test
    extends:
      service: user-api-base
    build:
      context: ./user_service
      target: test
    environment:
      - AWS_ACCESS_KEY_ID=test
      - AWS_SECRET_ACCESS_KEY=test
      - LOCALSTACK_PORT=4566
      - KMS_PORT=9002
      - CACHE_PORT=6379
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock

  plc:
    container_name: plc
    build:
      context: ./plc
      dockerfile: ../docker/plc/Dockerfile
    ports:
      - "2582:2582"
    environment:
      - NODE_ENV=development
      - DATABASE_URL=postgresql://postgres:postgres@db:5432/plc_dev
    depends_on:
      db:
        condition: service_healthy
      local-db-init:
        condition: service_completed_successfully
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:2582/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    profiles: ["local-data", "local-empty", "test"]

volumes:
  postgres_data:
  dragonflydata:
  go-mod-cache:
  go-build-cache:
