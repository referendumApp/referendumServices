# Environment variable sets
x-base-environment: &base-environment
  ENVIRONMENT: local

x-api-environment: &api-environment
  API_ACCESS_TOKEN: ${API_ACCESS_TOKEN}
  SECRET_KEY: ${API_ACCESS_TOKEN}
  ENABLE_DEBUGGER: ${ENABLE_DEBUGGER}

x-db-environment: &db-environment
  POSTGRES_USER: ${POSTGRES_USER}
  POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
  POSTGRES_HOST: ${POSTGRES_HOST}
  POSTGRES_PORT: ${POSTGRES_PORT}
  LEGISCAN_API_DB_NAME: ${LEGISCAN_API_DB_NAME}
  REFERENDUM_DB_NAME: ${REFERENDUM_DB_NAME}

services:
  api-base:
    build:
      context: .
      target: api
    environment:
      <<: *base-environment
      <<: *api-environment
      <<: *db-environment
    ports:
      - "80:80"
    profiles: ["base"]

  api:
    container_name: api
    extends:
      service: api-base
    command: [ "python", "-m", "uvicorn", "api.main:app", "--host", "0.0.0.0", "--port", "80" ]
    profiles: ["api"]

  api-local:
    container_name: api-local
    extends:
      service: api-base
    build:
      context: .
      target: api-local
    depends_on:
      db:
        condition: service_healthy
      local-init:
        condition: service_completed_successfully
      migrations:
        condition: service_completed_successfully
    ports:
      - "5678:5678"  # debugger port
      - "6000:6000"  # pytest debugger port
    volumes:
      - ./api:/code/api  # mount the api and common directory
      - ./common:/code/common
    command: ["python", "-m", "debugpy", "--listen", "0.0.0.0:5678", "-m", "uvicorn", "api.main:app", "--host", "0.0.0.0", "--port", "80", "--reload"]
    profiles: ["local-data", "local-empty"]

  db:
    container_name: db
    image: postgres:13
    environment:
      <<: *db-environment
    ports:
      - "${POSTGRES_PORT}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user"]
      interval: 5s
      timeout: 5s
      retries: 5
    profiles: ["local-data", "local-empty", "test"]

  local-init:
    container_name: local_init
    build:
      context: .
      target: local-init
    environment:
      <<: *db-environment
    depends_on:
      db:
        condition: service_healthy
    command: ["/code/local_init.sh"]
    profiles: ["local-data", "local-empty", "test"]

  migrations:
    build:
      context: .
      target: migrations
    environment:
      <<: *base-environment
      <<: *db-environment
    command: ["alembic", "upgrade", "head"]
    depends_on:
      db:
        condition: service_healthy
      local-init:
        condition: service_completed_successfully
    profiles: ["local-data", "local-empty", "test"]

  pipeline:
    container_name: pipeline
    build:
      context: .
      target: pipeline
    depends_on:
      db:
        condition: service_healthy
      local-init:
        condition: service_completed_successfully
      migrations:
        condition: service_completed_successfully
    environment:
      <<: *base-environment
      <<: *db-environment
    profiles: ["local-data"]

  test:
    container_name: test
    build:
      context: .
      target: test
    depends_on:
      db:
        condition: service_healthy
      local-init:
        condition: service_completed_successfully
      migrations:
        condition: service_completed_successfully
    environment:
      <<: *base-environment
      <<: *api-environment
      <<: *db-environment
    profiles: ["test"]
