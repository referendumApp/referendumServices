services:
  api-base:
    build:
      context: .
      target: api
    env_file: .env
    ports:
      - "80:80"
    profiles: ["base"]

  api:
    container_name: api
    extends:
      service: api-base
    command: [
      "python",
      "-m", "uvicorn",
      "api.main:app",
      "--host", "0.0.0.0",
      "--port", "80",
      "--log-config", "None"
    ]
    profiles: ["api"]

  api-local:
    container_name: api-local
    extends:
      service: api-base
    build:
      context: .
      target: api-local
    depends_on:
      db:
        condition: service_healthy
      local-db-init:
        condition: service_completed_successfully
      migrations:
        condition: service_completed_successfully
    ports:
      - "5678:5678"  # debugger port
      - "6000:6000"  # pytest debugger port
    volumes:
      - ./api:/code/api  # mount the api and common directory
      - ./common:/code/common
    command: ["python", "-m", "debugpy", "--listen", "0.0.0.0:5678", "-m", "uvicorn", "api.main:app", "--host", "0.0.0.0", "--port", "80", "--reload"]
    profiles: ["local-data", "local-empty"]

  db:
    container_name: db
    image: postgres:13
    env_file: .env
    ports:
      - "${POSTGRES_PORT}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 2s
      timeout: 5s
      retries: 5
    profiles: ["local-data", "local-empty", "test"]

  minio:
    container_name: minio
    image: minio/minio
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin
    command: server /data --console-address ":9001"
    ports:
      - "9000:9000"  # API
      - "9001:9001"  # Console
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9000/minio/health/live" ]
      interval: 2s
      timeout: 5s
      retries: 3
    profiles: [ "local-data", "local-empty", "test" ]

  minio-init:
    image: minio/mc
    depends_on:
      minio:
        condition: service_healthy
    entrypoint: >
      /bin/sh -c "
      mc config host add localminio http://minio:9000 minioadmin minioadmin;
      mc mb localminio/bill-texts --ignore-existing;
      mc policy set public localminio/bill-texts;
      exit 0;
      "
    profiles: [ "local-data", "local-empty", "test" ]

  local-db-init:
    container_name: local_db_init
    build:
      context: .
      target: local-db-init
    env_file: .env
    depends_on:
      db:
        condition: service_healthy
      minio-init:
        condition: service_completed_successfully
    command: ["/code/local_db_init.sh"]
    profiles: ["local-data", "local-empty", "test"]

  migrations:
    build:
      context: .
      target: migrations
    env_file: .env
    command: ["alembic", "upgrade", "head"]
    depends_on:
      db:
        condition: service_healthy
      local-db-init:
        condition: service_completed_successfully
    profiles: ["local-data", "local-empty", "test"]

  pipeline:
    container_name: pipeline
    build:
      context: .
      target: pipeline
    depends_on:
      db:
        condition: service_healthy
      minio:
        condition: service_healthy
      local-db-init:
        condition: service_completed_successfully
      migrations:
        condition: service_completed_successfully
    env_file: .env
    profiles: ["local-data"]

  test:
    container_name: test
    build:
      context: .
      target: test
    depends_on:
      db:
        condition: service_healthy
      minio:
        condition: service_healthy
      local-db-init:
        condition: service_completed_successfully
      migrations:
        condition: service_completed_successfully
    env_file: .env
    profiles: ["test"]
    command: ["pytest", "api/tests/test_bills.py"]
