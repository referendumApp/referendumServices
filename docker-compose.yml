services:
  api-base:
    build:
      context: ./data_service
      target: api
    env_file: .env
    ports:
      - "80:80"
    profiles: ["base"]

  api:
    container_name: api
    extends:
      service: api-base
    command:
      [
        "python",
        "-m",
        "uvicorn",
        "api.main:app",
        "--host",
        "0.0.0.0",
        "--port",
        "80",
        "--log-config",
        "None",
      ]
    profiles: ["api"]

  api-local:
    container_name: api-local
    extends:
      service: api-base
    build:
      context: ./data_service
      target: api-local
    depends_on:
      db:
        condition: service_healthy
      local-db-init:
        condition: service_completed_successfully
      migrations:
        condition: service_completed_successfully
    ports:
      - "5678:5678" # debugger port
      - "6000:6000" # pytest debugger port
    volumes:
      - ./data_service/api:/code/api # mount the api and common directory
      - ./data_service/common:/code/common
    command:
      [
        "python",
        "-m",
        "debugpy",
        "--listen",
        "0.0.0.0:5678",
        "-m",
        "uvicorn",
        "api.main:app",
        "--host",
        "0.0.0.0",
        "--port",
        "80",
        "--reload",
      ]
    profiles: ["local-data", "local-empty"]

  user-api-base:
    build:
      context: ./user_service
      target: base
    env_file: .env
    environment:
      - AWS_ACCESS_KEY_ID=$S3_ACCESS_KEY
      - AWS_SECRET_ACCESS_KEY=$S3_SECRET_KEY
    profiles: ["base"]

  user-api:
    container_name: user-api
    extends:
      service: user-api-base
    build:
      context: ./user_service
      target: user-prod
    ports:
      - "80:80"
    profiles: ["atp"]

  user-api-local:
    container_name: user-api-local
    extends:
      service: user-api-base
    build:
      context: ./user_service
      target: user-local
    environment:
      - CGO_ENABLED=0
    depends_on:
      db:
        condition: service_healthy
      local-db-init:
        condition: service_completed_successfully
      migrations:
        condition: service_completed_successfully
      kms:
        condition: service_healthy
    volumes:
      - ./user_service/cmd:/code/cmd
      - ./user_service/internal:/code/internal
    ports:
      - "8080:80"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 3s
      start_period: 30s
    profiles: ["local-data", "local-empty"]

  db:
    container_name: db
    image: postgres:13
    env_file: .env
    ports:
      - "${POSTGRES_PORT}:5432"
    command: ["postgres", "-c", "log_statement=all", "-c", "log_destination=stderr", "-c", "log_min_duration_statement=0"]
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 2s
      timeout: 5s
      retries: 5
    profiles: ["local-data", "local-empty", "test"]

  minio:
    container_name: minio
    image: minio/minio
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin
    command: server /data --console-address ":9001"
    ports:
      - "9000:9000" # API
      - "9001:9001" # Console
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 2s
      timeout: 5s
      retries: 3
    profiles: ["local-data", "local-empty", "test"]

  minio-init:
    image: minio/mc
    depends_on:
      minio:
        condition: service_healthy
    entrypoint: >
      /bin/sh -c "
      mc config host add localminio http://minio:9000 minioadmin minioadmin;
      mc mb localminio/bill-texts --ignore-existing;
      mc policy set public localminio/bill-texts;
      exit 0;
      "
    profiles: ["local-data", "local-empty", "test"]

  kms:
    container_name: kms
    image: kng93/local-kms
    ports:
      - "9002:8080"
    environment:
      - KMS_REGION=$AWS_REGION
      - KMS_ACCOUNT_ID=$KMS_ACCOUNT_ID
    volumes:
      - ./user_service/local/kms_seed.yaml:/init/seed.yaml
    healthcheck:
      test:
        - "CMD"
        - "curl"
        - "-l"
        - "http://localhost:8080"
        - "-H"
        - "X-Amz-Target: TrentService.ListKeys"
        - "-H"
        - "Content-Type: application/x-amz-json-1.1"
        - "-d"
        - "{}"
      start_period: 3s
      interval: 2s
      timeout: 5s
      retries: 3

  local-db-init:
    container_name: local_db_init
    build:
      context: ./data_service
      target: local-db-init
    env_file: .env
    depends_on:
      db:
        condition: service_healthy
      minio-init:
        condition: service_completed_successfully
    command: ["/code/local_db_init.sh"]
    profiles: ["local-data", "local-empty", "test"]

  migrations:
    build:
      context: ./data_service
      target: migrations
    env_file: .env
    command: ["alembic", "upgrade", "head"]
    depends_on:
      db:
        condition: service_healthy
      local-db-init:
        condition: service_completed_successfully
    profiles: ["local-data", "local-empty", "test"]

  pipeline:
    container_name: pipeline
    build:
      context: ./data_service
      target: pipeline
    depends_on:
      db:
        condition: service_healthy
      minio:
        condition: service_healthy
      local-db-init:
        condition: service_completed_successfully
      migrations:
        condition: service_completed_successfully
    env_file: .env
    profiles: ["local-data"]

  test:
    container_name: test
    build:
      context: ./data_service
      target: test
    depends_on:
      db:
        condition: service_healthy
      minio:
        condition: service_healthy
      local-db-init:
        condition: service_completed_successfully
      migrations:
        condition: service_completed_successfully
    env_file: .env
    profiles: ["test"]


volumes:
  postgres_data:
