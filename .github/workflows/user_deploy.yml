name: Deploy User Service

on:
  push:
    branches:
      - main
    paths:
      - "user_service/**"
      - ".github/workflows/user_deploy.yml"
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: 'choice'
        options:
          - dev
          - prod
      bump_version:
        description: 'Version bump type (only used for production)'
        required: false
        default: 'patch'
        type: 'choice'
        options:
          - patch
          - minor
          - major

env:
  AWS_ACCOUNT_ID: 842675976781
  AWS_REGION: us-east-2
  ECR_REPOSITORY_API: referendum/user-api
  ECR_REPOSITORY_PIPELINE: referendum/pipeline
  POSTGRES_PASSWORD_SECRET_NAME: rds!db-a5c629ff-4d6e-4d68-9680-6cdab848369c
  SECRET_KEY_SECRET_NAME: /system/SECRET_KEY
  S3_ACCESS_CREDENTIALS_SECRET_NAME: /system/S3_BILL_TEXTS_CREDENTIALS

permissions:
  contents: write

jobs:
  set-deployment-vars:
    runs-on: ubuntu-latest
    outputs:
      deploy_env: ${{ steps.set-vars.outputs.deploy_env }}
      image_tag: ${{ steps.set-vars.outputs.image_tag }}
    steps:
    - name: Set deployment variables
      id: set-vars
      run: |
        # Default to dev for push to main, use input for manual trigger
        if [[ "${{ github.event_name }}" == "push" ]]; then
          echo "deploy_env=dev" >> $GITHUB_OUTPUT
          echo "image_tag=dev-${{ github.sha }}" >> $GITHUB_OUTPUT
        else
          echo "deploy_env=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
          echo "image_tag=${{ github.event.inputs.environment }}-${{ github.sha }}" >> $GITHUB_OUTPUT
        fi

  update-version:
    needs: [set-deployment-vars]
    if: needs.set-deployment-vars.outputs.deploy_env == 'prod'
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.bump_version.outputs.new_version }}
      previous_version: ${{ steps.get_version.outputs.current_version }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Get current version
      id: get_version
      run: echo "current_version=$(cat ./user_service/version.txt)" >> $GITHUB_OUTPUT

    - name: Bump version
      id: bump_version
      run: |
        current_version=${{ steps.get_version.outputs.current_version }}
        bump_type="${{ github.event.inputs.bump_version }}"
        
        if [[ "$bump_type" == "major" ]]; then
          new_version=$(echo $current_version | awk -F. '{$1 = $1 + 1; $2 = 0; $3 = 0} 1' | sed 's/ /./g')
        elif [[ "$bump_type" == "minor" ]]; then
          new_version=$(echo $current_version | awk -F. '{$2 = $2 + 1; $3 = 0} 1' | sed 's/ /./g')
        else
          new_version=$(echo $current_version | awk -F. '{$3 = $3 + 1} 1' | sed 's/ /./g')
        fi
        echo $new_version > ./user_service/version.txt
        echo "new_version=$new_version" >> $GITHUB_OUTPUT

    - name: Get commit information
      id: get_commits
      run: |
        # Get the tag of the previous version or default to the first commit if no tags exist
        PREVIOUS_TAG=$(git tag --sort=-v:refname | grep "user-service-v" | head -n 1 || git rev-list --max-parents=0 HEAD)
        
        # Store commit logs between the previous tag and HEAD
        git log $PREVIOUS_TAG..HEAD --pretty=format:"%h %s" > commit_log.txt
        cat commit_log.txt

    - name: Commit version update
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add ./user_service/version.txt
        git commit -m "Bump version to ${{ steps.bump_version.outputs.new_version }}"

    - name: Push changes
      uses: ad-m/github-push-action@master
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        branch: main

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: user-service-v${{ steps.bump_version.outputs.new_version }}
        name: User Service v${{ steps.bump_version.outputs.new_version }}
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  deploy-api:
    needs: [set-deployment-vars, update-version]
    if: always() && (needs.update-version.result == 'success' || needs.update-version.result == 'skipped')
    runs-on: ubuntu-latest
    env:
      DEPLOY_ENV: ${{ needs.set-deployment-vars.outputs.deploy_env }}
      IMAGE_TAG: ${{ needs.set-deployment-vars.outputs.image_tag }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Set additional deployment variables
      run: |
        echo "PORT_MAPPING=$([ "$DEPLOY_ENV" == "prod" ] && echo "8000:80" || echo "8001:80")" >> $GITHUB_ENV
        
        # Get EC2 Instance ID from SSM Parameter Store based on environment
        EC2_INSTANCE_ID_PARAM="/$(echo $DEPLOY_ENV | tr '[:upper:]' '[:lower:]')/USER_EC2_INSTANCE_ID"
        EC2_INSTANCE_ID=$(aws ssm get-parameter --name $EC2_INSTANCE_ID_PARAM --query "Parameter.Value" --output text)
        echo "EC2_INSTANCE_ID=$EC2_INSTANCE_ID" >> $GITHUB_ENV

    - name: Build, tag, and push API image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      run: |
        set -e
        docker compose --profile user-api build
        docker image ls
        docker tag user-api:latest $ECR_REGISTRY/$ECR_REPOSITORY_API:${{ env.IMAGE_TAG }}
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_API:${{ env.IMAGE_TAG }}

    - name: Deploy to EC2
      id: deploy-ec2
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      run: |
        set -e
        echo "deployment_failed=false" >> $GITHUB_OUTPUT
        echo "Deploying to EC2..."
        DEPLOY_COMMAND_OUTPUT=$(aws ssm send-command \
          --instance-ids "${{ env.EC2_INSTANCE_ID }}" \
          --document-name "AWS-RunShellScript" \
          --parameters '{
            "commands": [
              "set -e",
              "aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ steps.login-ecr.outputs.registry }}",
              "docker pull ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY_API }}:${{ env.IMAGE_TAG }} >/dev/null",
              "docker stop ${{ env.DEPLOY_ENV }}-app || true",
              "docker rm ${{ env.DEPLOY_ENV }}-app || true",
              "SSM_PARAMS_JSON=$(aws ssm get-parameters-by-path --path /${{ env.DEPLOY_ENV }}/ --with-decryption --query \"Parameters[*].{Name:Name,Value:Value}\" --output json)",
              "ENV_VARS=$(echo \"$SSM_PARAMS_JSON\" | jq -r \".[] | \\\" -e \\\" + .Name + \\\"=\\\" + .Value\" | sed \"s/\\/[^\\/]*\\///g\" | tr \"\\n\" \" \")",
              "POSTGRES_SECRET=$(aws secretsmanager get-secret-value --secret-id ${{ env.POSTGRES_PASSWORD_SECRET_NAME }} --query SecretString --output text)",
              "POSTGRES_PASSWORD=$(echo $POSTGRES_SECRET | jq -r '.password')",
              "SECRET_KEY_SECRET=$(aws secretsmanager get-secret-value --secret-id ${{ env.SECRET_KEY_SECRET_NAME }} --query SecretString --output text)",
              "SECRET_KEY=$(echo $SECRET_KEY_SECRET | jq -r '.token')",
              "S3_ACCESS_SECRET=$(aws secretsmanager get-secret-value --secret-id ${{ env.S3_ACCESS_CREDENTIALS_SECRET_NAME }} --query SecretString --output text)",
              "S3_ACCESS_KEY=$(echo $S3_ACCESS_SECRET | jq -r '.access_key')",
              "S3_SECRET_KEY=$(echo $S3_ACCESS_SECRET | jq -r '.secret_key')",
              "echo \"Running database migrations...\"",
              "echo \"Starting application...\"",
              "docker run -d --name ${{ env.DEPLOY_ENV }}-app -p ${{ env.PORT_MAPPING }} -e ENVIRONMENT=${{ env.DEPLOY_ENV }} -e POSTGRES_PASSWORD=\"$POSTGRES_PASSWORD\" -e SECRET_KEY=\"$SECRET_KEY\" -e S3_ACCESS_KEY=\"$S3_ACCESS_KEY\" -e S3_SECRET_KEY=\"$S3_SECRET_KEY\" -e GOOGLE_IOS_CLIENT_ID=\"${{ secrets.GOOGLE_IOS_CLIENT_ID }}\" -e GOOGLE_ANDROID_CLIENT_ID=\"${{ secrets.GOOGLE_ANDROID_CLIENT_ID }}\" $ENV_VARS ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY_API }}:${{ env.IMAGE_TAG }}",
              "docker container prune -f",
              "docker image prune -af",
              "docker network prune -f",
              "docker volume prune -af",
              "echo ${{ env.DEPLOY_ENV }} deployment completed"
            ]
          }' \
          --output json)
        
        DEPLOY_COMMAND_ID=$(echo "$DEPLOY_COMMAND_OUTPUT" | jq -r '.Command.CommandId')
        
        echo "Deployment command ID: $DEPLOY_COMMAND_ID"
        
        # Wait for the command to complete and check its status
        while true; do
          COMMAND_RESULT=$(aws ssm list-command-invocations \
            --command-id "$DEPLOY_COMMAND_ID" \
            --details \
            --output json)
          
          STATUS=$(echo "$COMMAND_RESULT" | jq -r '.CommandInvocations[0].Status')
          
          if [ "$STATUS" = "Success" ]; then
            echo "Deployment command executed successfully"
            break
          elif [ "$STATUS" = "Failed" ] || [ "$STATUS" = "TimedOut" ]; then
            echo "Deployment command $STATUS"
            echo "Command output:"
            echo "$COMMAND_RESULT" | jq -r '.CommandInvocations[0].CommandPlugins[0].Output'
            echo "deployment_failed=true" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          echo "Waiting for deployment command to complete... Current status: $STATUS"
          sleep 10
        done

    - name: Verify Deployment
      id: verify-deployment
      if: always()
      run: |
        set -e
        echo "Verifying deployment..."
        PORT="${{ env.DEPLOY_ENV == 'prod' && '8000' || '8001' }}"
        MAX_RETRIES=5
        RETRY_INTERVAL=10
        
        for i in $(seq 1 $MAX_RETRIES); do
          echo "Attempt $i of $MAX_RETRIES"
          HEALTH_CHECK_COMMAND_ID=$(aws ssm send-command \
            --instance-ids "${{ env.EC2_INSTANCE_ID }}" \
            --document-name "AWS-RunShellScript" \
            --parameters "{\"commands\":[\"curl -s -o /dev/null -w \\\"%{http_code}\\\" http://localhost:$PORT/health\"]}" \
            --output text \
            --query "Command.CommandId")

          sleep $RETRY_INTERVAL

          HEALTH_CHECK_STATUS_CODE=$(aws ssm list-command-invocations \
            --command-id "$HEALTH_CHECK_COMMAND_ID" \
            --details \
            --output text \
            --query "CommandInvocations[].CommandPlugins[].Output")

          if [ "$HEALTH_CHECK_STATUS_CODE" == "200" ]; then
            echo "Deployment verified successfully"
            echo "Updating stable tags..."
            docker tag ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY_API }}:${{ env.IMAGE_TAG }} ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY_API }}:${{ env.DEPLOY_ENV }}-stable
            docker push ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY_API }}:${{ env.DEPLOY_ENV }}-stable
            
            echo "verification_status=success" >> $GITHUB_OUTPUT
            echo "Deployment successful"
            exit 0
          fi

          echo "Health check failed. Status code: $HEALTH_CHECK_STATUS_CODE"
        done

        echo "verification_status=failed" >> $GITHUB_OUTPUT
        echo "Deployment verification failed after $MAX_RETRIES attempts"
        exit 1

    - name: Rollback Deployment
      if: |
        steps.deploy-ec2.outputs.deployment_failed == 'true' || 
        steps.verify-deployment.outputs.verification_status == 'failed'
      run: |
        echo "Rolling back to previous stable version..."
        aws ssm send-command \
          --instance-ids "${{ env.EC2_INSTANCE_ID }}" \
          --document-name "AWS-RunShellScript" \
          --parameters '{
            "commands": [
              "docker stop ${{ env.DEPLOY_ENV }}-app || true",
              "docker rm ${{ env.DEPLOY_ENV }}-app || true",
              "docker rmi ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY_API }}:${{ env.IMAGE_TAG }} || true",
              "SSM_PARAMS_JSON=$(aws ssm get-parameters-by-path --path /${{ env.DEPLOY_ENV }}/ --with-decryption --query \"Parameters[*].{Name:Name,Value:Value}\" --output json)",
              "ENV_VARS=$(echo \"$SSM_PARAMS_JSON\" | jq -r \".[] | \\\" -e \\\" + .Name + \\\"=\\\" + .Value\" | sed \"s/\\/[^\\/]*\\///g\" | tr \"\\n\" \" \")",
              "POSTGRES_SECRET=$(aws secretsmanager get-secret-value --secret-id ${{ env.POSTGRES_PASSWORD_SECRET_NAME }} --query SecretString --output text)",
              "POSTGRES_PASSWORD=$(echo $POSTGRES_SECRET | jq -r '.password')",
              "SECRET_KEY_SECRET=$(aws secretsmanager get-secret-value --secret-id ${{ env.SECRET_KEY_SECRET_NAME }} --query SecretString --output text)",
              "SECRET_KEY=$(echo $SECRET_KEY_SECRET | jq -r '.token')",
              "docker run -d --name ${{ env.DEPLOY_ENV }}-app -p ${{ env.PORT_MAPPING }} -e ENVIRONMENT=${{ env.DEPLOY_ENV }} -e POSTGRES_PASSWORD=\"$POSTGRES_PASSWORD\" -e SECRET_KEY=\"$SECRET_KEY\" -e S3_ACCESS_KEY=\"$S3_ACCESS_KEY\" -e S3_SECRET_KEY=\"$S3_SECRET_KEY\" -e GOOGLE_IOS_CLIENT_ID=\"${{ secrets.GOOGLE_IOS_CLIENT_ID }}\" -e GOOGLE_ANDROID_CLIENT_ID=\"${{ secrets.GOOGLE_ANDROID_CLIENT_ID }}\" $ENV_VARS ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY_API }}:${{ env.DEPLOY_ENV }}-stable"
            ]
          }'
