name: Deploy to Amazon ECR and EC2

on:
  push:
    branches: [ main ]

env:
  AWS_REGION: us-east-2
  ECR_REPOSITORY: referendum/api
  EC2_INSTANCE_ID: i-08edd9a77b42449b2

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

    - name: Check EC2 instance status
      run: |
        aws ec2 describe-instance-status --instance-ids ${{ env.EC2_INSTANCE_ID }}

    - name: Deploy to EC2
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        COMMAND_ID=$(aws ssm send-command \
        --instance-ids ${{ env.EC2_INSTANCE_ID }} \
        --document-name "AWS-RunShellScript" \
        --parameters commands=[
         "aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin $ECR_REGISTRY",
         "docker pull $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG",
         "docker stop $(docker ps -a -q) || true",
         "docker rm $(docker ps -a -q) || true",
         "docker run -d -p 80:80 $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
        ] \
        --output text \
        --query "Command.CommandId")
        
        echo "Command ID: $COMMAND_ID"
        
        # Wait for command to complete
        while true; do
        STATUS=$(aws ssm list-command-invocations \
         --command-id "$COMMAND_ID" \
         --details \
         --query "CommandInvocations[0].Status" \
         --output text)
        
        if [ "$STATUS" = "Success" ]; then
         echo "Deployment successful"
         break
        elif [ "$STATUS" = "Failed" ] || [ "$STATUS" = "Canceled" ] || [ "$STATUS" = "TimedOut" ]; then
         echo "Deployment failed with status: $STATUS"
         aws ssm get-command-invocation \
           --command-id "$COMMAND_ID" \
           --instance-id "${{ env.EC2_INSTANCE_ID }}" \
           --query "StandardOutputContent" \
           --output text
         exit 1
        fi
        
        echo "Waiting for deployment to complete. Current status: $STATUS"
        sleep 10
        done

        - name: Verify Deployment
          run: |
            aws ec2 describe-instance-status --instance-ids ${{ env.EC2_INSTANCE_ID }}