name: Deploy to AWS

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to (prod/test)'
        required: true
        default: 'test'

env:
  AWS_REGION: us-east-2
  ECR_REPOSITORY: referendum/services
  EC2_INSTANCE_ID: i-08edd9a77b42449b2

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Set deployment variables
      run: |
        if [[ "${{ github.event_name }}" == "push" ]]; then
          DEPLOY_ENV="prod"
        else
          DEPLOY_ENV="${{ github.event.inputs.environment }}"
        fi
        echo "DEPLOY_ENV=$DEPLOY_ENV" >> $GITHUB_ENV
        echo "IMAGE_TAG=$DEPLOY_ENV-${{ github.sha }}" >> $GITHUB_ENV
        echo "PORT_MAPPING=$([ "$DEPLOY_ENV" == "prod" ] && echo "80:80" || echo "8080:80")" >> $GITHUB_ENV

    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      run: |
        docker compose --profile service build api
        docker tag referendumservices-api:latest $ECR_REGISTRY/$ECR_REPOSITORY:${{ env.IMAGE_TAG }}
        docker tag referendumservices-api:latest $ECR_REGISTRY/$ECR_REPOSITORY:${{ env.DEPLOY_ENV }}-latest
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:${{ env.IMAGE_TAG }}
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:${{ env.DEPLOY_ENV }}-latest

    - name: Deploy to EC2
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      run: |
        aws ssm send-command \
          --instance-ids "${{ env.EC2_INSTANCE_ID }}" \
          --document-name "AWS-RunShellScript" \
          --parameters '{
            "commands": [
              "aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ steps.login-ecr.outputs.registry }}",
              "docker pull ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}",
              "docker stop ${{ env.DEPLOY_ENV }}-app || true",
              "docker rm ${{ env.DEPLOY_ENV }}-app || true",
              "docker run -d --name ${{ env.DEPLOY_ENV }}-app -p ${{ env.PORT_MAPPING }} ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}",
              "docker system prune -af",
              "echo ${{ env.DEPLOY_ENV }} deployment completed"
            ]
          }'

    - name: Verify Deployment
      run: |
        sleep 30
        PORT="${{ env.DEPLOY_ENV == 'prod' && '80' || '8080' }}"
        HEALTH_CHECK_COMMAND_ID=$(aws ssm send-command \
          --instance-ids "${{ env.EC2_INSTANCE_ID }}" \
          --document-name "AWS-RunShellScript" \
          --parameters "{\"commands\":[\"curl -s -o /dev/null -w \\\"%{http_code}\\\" http://localhost:$PORT/health\"]}" \
          --output text \
          --query "Command.CommandId")
        HEALTH_CHECK_STATUS_CODE=$(aws ssm list-command-invocations \
          --command-id "$HEALTH_CHECK_COMMAND_ID" \
          --details \
          --output text \
          --query "CommandInvocations[].CommandPlugins[].Output")
        
        if [ "$HEALTH_CHECK_STATUS_CODE" != "200" ]; then
          echo "Deployment verification failed. Health check returned: $HEALTH_CHECK_STATUS_CODE"
          echo "Rolling back to previous version..."
          aws ssm send-command \
            --instance-ids "${{ env.EC2_INSTANCE_ID }}" \
            --document-name "AWS-RunShellScript" \
            --parameters '{
              "commands": [
                "docker stop ${{ env.DEPLOY_ENV }}-app || true",
                "docker rm ${{ env.DEPLOY_ENV }}-app || true",
                "docker run -d --name ${{ env.DEPLOY_ENV }}-app -p ${{ env.PORT_MAPPING }} --env-file /etc/environment/${{ env.DEPLOY_ENV }}.env ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ env.DEPLOY_ENV }}-latest"
              ]
            }'
          exit 1
        fi
        
        echo "Deployment successful"
