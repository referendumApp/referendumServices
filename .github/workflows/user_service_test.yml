name: Run User Service Tests

on:
  push:
    branches: [main]
    paths:
      - "user_service/**"
      - ".github/workflows/user_service_test.yml"
  pull_request:
    branches: [main]
    paths:
      - "user_service/**"
      - ".github/workflows/user_service_test.yml"

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-go@v5
        with:
          go-version: "1.24"
          cache: true
          cache-dependency-path: user_service/go.sum

      - name: golangci-lint
        uses: golangci/golangci-lint-action@v7
        with:
          working-directory: user_service

  build-schema:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-go@v5
        with:
          go-version: "1.24"
          cache: true
          cache-dependency-path: user_service/go.sum

      - name: Build Lexicon Schema
        working-directory: user_service
        run: go run ./cmd/lexgen --build-file ./cmd/lexgen/build-config.json "./cmd/lexgen/lexicons/com/referendumapp"

  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Cache Docker Layers
      uses: actions/cache@v3
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-

    - name: Build Migrations Image
      uses: docker/build-push-action@v6
      with:
        context: ./data_service
        file: ./data_service/Dockerfile
        target: migrations
        push: false
        load: true
        tags: migrations:${{ github.sha }}-${{ github.run_number }}
        cache-from: type=local,src=/tmp/.buildx-cache
        cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max

    - name: Set Go cache env vars
      run: |
        echo "GOCACHE=$(go env GOCACHE)" >> $GITHUB_ENV
        echo "GOMODCACHE=$(go env GOMODCACHE)" >> $GITHUB_ENV

    - name: Build Test Image
      uses: docker/build-push-action@v6
      with:
        context: ./user_service
        file: ./user_service/Dockerfile
        target: test
        push: false
        load: true
        tags: user-test:${{ github.sha }}-${{ github.run_number }}
        build-args: |
          GOMODCACHE=${{ env.GOMODCACHE }}
          GOCACHE=${{ env.GOCACHE }}
        cache-from: type=local,src=/tmp/.buildx-cache
        cache-to: type=local,dest=/tmp/.buildx-cache-new2,mode=max
    
    - name: Update Cache
      run: |
        rm -rf /tmp/.buildx-cache-old

        if [ -d "/tmp/.buildx-cache" ]; then
          mv /tmp/.buildx-cache /tmp/.buildx-cache-old
        else
          # Create cache directory if it doesn't exist
          mkdir -p /tmp/.buildx-cache
        fi
        
        # Merge all cache directories
        for dir in /tmp/.buildx-cache-new*; do
          if [ -d "$dir" ] && [ "$(ls -A "$dir" 2>/dev/null)" ]; then
            cp -r "$dir"/* /tmp/.buildx-cache/ 2>/dev/null || true
            rm -rf "$dir"
          fi
        done
        
        rm -rf /tmp/.buildx-cache-old

    - name: Run Tests
      run: |
        docker run \
          --name user-test \
          # --env CI=true \
          --env AWS_ACCESS_KEY_ID=$S3_ACCESS_KEY \
          --env AWS_SECRET_ACCESS_KEY=$S3_SECRET_KEY \
          --env MINIO_API_PORT=9000 \
          --env MINIO_CONSOLE_PORT=9001 \
          --env KMS_PORT=9002 \
          --env-file .env \
          --volume /var/run/docker.sock:/var/run/docker.sock \
        --add-host host.docker.internal:host-gateway
          user-test

    - name: Clean Tests
      if: always()
      run: docker compose down -v
