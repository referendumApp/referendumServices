name: Run User Service Tests

on:
  push:
    branches: [main]
    paths:
      - "user_service/**"
      - ".github/workflows/user_service_test.yml"
      - "docker-compose.yml"
  pull_request:
    branches: [main]
    paths:
      - "user_service/**"
      - ".github/workflows/user_service_test.yml"
      - "docker-compose.yml"

env:
  AWS_ACCESS_KEY_ID: test
  AWS_SECRET_ACCESS_KEY: test
  LOCALSTACK_PORT: 4566
  KMS_PORT: 9002
  SYSTEM_USER_HANDLE: "system.referendumapp.com"
  SYSTEM_USER_DISPLAY_NAME: "System User"
  SYSTEM_USER_EMAIL: "system@referendumapp.com"
  SYSTEM_USER_SECRET_NAME: "SYSTEM_USER_SECRET_NAME"

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-go@v5
        with:
          go-version: "1.24"
          cache: true
          cache-dependency-path: user_service/go.sum

      - name: golangci-lint
        uses: golangci/golangci-lint-action@v7
        with:
          working-directory: user_service

  build-schema:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-go@v5
        with:
          go-version: "1.24"
          cache: true
          cache-dependency-path: user_service/go.sum

      - name: Build Lexicon Schema
        working-directory: user_service
        run: go run ./cmd/lexgen --build-file ./cmd/lexgen/build-config.json "./cmd/lexgen/lexicons/com/referendumapp"

  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-go@v5
        with:
          go-version: "1.24"
          cache: true
          cache-dependency-path: user_service/go.sum

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache User Test Docker Layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache-user-tests
          key: ${{ runner.os }}-buildx-user-tests-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-user-tests-${{ github.ref }}-
            ${{ runner.os }}-buildx-user-tests-

      - name: Build Migrations Image
        uses: docker/build-push-action@v6
        with:
          context: ./data_service
          file: ./data_service/Dockerfile
          target: migrations
          push: false
          load: true
          tags: migrations

      - name: Build Test Image
        uses: docker/build-push-action@v6
        with:
          context: ./user_service
          file: ./user_service/Dockerfile
          target: test
          push: false
          load: true
          tags: user-test
          build-args: |
            GOMODCACHE=/go/pkg/mod
            GOCACHE=/root/.cache/go-build
          cache-from: type=local,src=/tmp/.buildx-cache-user-tests
          cache-to: type=local,dest=/tmp/.buildx-cache-user-tests-new,mode=max

      # TODO: Bug with `--add-host host.docker.internal:host-gateway`
      # https://github.com/docker/buildx/issues/1832
      - name: Run Tests
        run: |
          docker run \
            --name user-test \
            --env CI=true \
            --env AWS_ACCESS_KEY_ID=${{ env.AWS_ACCESS_KEY_ID }} \
            --env AWS_SECRET_ACCESS_KEY=${{ env.AWS_SECRET_ACCESS_KEY }} \
            --env LOCALSTACK_PORT=${{ env.LOCALSTACK_PORT }} \
            --env KMS_PORT=${{ env.KMS_PORT }} \
            --env SYSTEM_USER_HANDLE="${{ env.SYSTEM_USER_HANDLE }}" \
            --env SYSTEM_USER_DISPLAY_NAME="${{ env.SYSTEM_USER_DISPLAY_NAME }}" \
            --env SYSTEM_USER_EMAIL="${{ env.SYSTEM_USER_EMAIL }}" \
            --env SYSTEM_USER_SECRET_NAME="${{ env.SYSTEM_USER_SECRET_NAME }}" \
            --env-file .env \
            --volume /var/run/docker.sock:/var/run/docker.sock \
            --rm \
            user-test

      - name: Update Cache
        run: |
          echo "Removing old cache directory if it exists..."
          rm -rf /tmp/.buildx-cache-user-tests || true

          echo "Creating new merged cache directory..."
          mv /tmp/.buildx-cache-user-tests-new /tmp/.buildx-cache-user-tests

      - name: Clean Tests
        if: always()
        run: |
          docker container prune -f
          docker volume prune -f
