version: "2"

# Options for analysis running.
run:
  # Timeout for total work, e.g. 30s, 5m, 5m30s.
  # If the value is lower or equal to 0, the timeout is disabled.
  # Default: 0 (disabled)
  timeout: 5m
  # The mode used to evaluate relative paths.
  # It's used by exclusions, Go plugins, and some linters.
  # The value can be:
  # - `gomod`: the paths will be relative to the directory of the `go.mod` file.
  # - `gitroot`: the paths will be relative to the git root (the parent directory of `.git`).
  # - `cfg`: the paths will be relative to the configuration file.
  # - `wd` (NOT recommended): the paths will be relative to the place where golangci-lint is run.
  # Default: cfg
  relative-path-mode: gomod
  # Exit code when at least one issue was found.
  # Default: 1
  issues-exit-code: 2
  # Include test files or not.
  # Default: true
  tests: false
  # List of build tags, all linters use it.
  # Default: []
  build-tags:
    - mytag
  # If set, we pass it to "go list -mod={option}". From "go help modules":
  # If invoked with -mod=readonly, the go command is disallowed from the implicit
  # automatic updating of go.mod described above. Instead, it fails when any changes
  # to go.mod are needed. This setting is most useful to check that go.mod does
  # not need updates, such as in a continuous integration and testing system.
  # If invoked with -mod=vendor, the go command assumes that the vendor
  # directory holds the correct copies of dependencies and ignores
  # the dependency descriptions in go.mod.
  #
  # Allowed values: readonly|vendor|mod
  # Default: ""
  modules-download-mode: readonly
  # Allow multiple parallel golangci-lint instances running.
  # If false, golangci-lint acquires file lock on start.
  # Default: false
  allow-parallel-runners: true
  # Allow multiple golangci-lint instances running, but serialize them around a lock.
  # If false, golangci-lint exits with an error if it fails to acquire file lock on start.
  # Default: false
  allow-serial-runners: true
  # Define the Go version limit.
  # Default: use Go version from the go.mod file, fallback on the env var `GOVERSION`, fallback on 1.22.
  go: "1.24"
  # Number of operating system threads (`GOMAXPROCS`) that can execute golangci-lint simultaneously.
  # Default: 0 (automatically set to match Linux container CPU quota and
  # fall back to the number of logical CPUs in the machine)
  concurrency: 4

# Output configuration options.
output:
  # The formats used to render issues.
  formats:
    # Prints issues in a text format with colors, line number, and linter name.
    # This format is the default format.
    text:
      # Output path can be either `stdout`, `stderr` or path to the file to write to.
      # Default: stdout
      # path: ./path/to/output.txt
      # Print linter name in the end of issue text.
      # Default: true
      print-linter-name: true
      # Print lines of code with issue.
      # Default: true
      print-issued-lines: true 
      # Use colors.
      # Default: true
      colors: true
    # Prints issues in a JSON representation.
    # json:
      # Output path can be either `stdout`, `stderr` or path to the file to write to.
      # Default: stdout
      # path: ./path/to/output.json
    # Prints issues in columns representation separated by tabulations.
    tab:
      # Output path can be either `stdout`, `stderr` or path to the file to write to.
      # Default: stdout
      # path: ./path/to/output.txt
      # Print linter name in the end of issue text.
      # Default: true
      print-linter-name: true
      # Use colors.
      # Default: true
      colors: true
    # Prints issues in an HTML page.
    # It uses the Cloudflare CDN (cdnjs) and React.
    # html:
      # Output path can be either `stdout`, `stderr` or path to the file to write to.
      # Default: stdout
      # path: ./path/to/output.html
    # Prints issues in the Checkstyle format.
    # checkstyle:
      # Output path can be either `stdout`, `stderr` or path to the file to write to.
      # Default: stdout
      # path: ./path/to/output.xml
    # Prints issues in the Code Climate format.
    # code-climate:
      # Output path can be either `stdout`, `stderr` or path to the file to write to.
      # Default: stdout
      # path: ./path/to/output.json
    # Prints issues in the JUnit XML format.
    junit-xml:
      # Output path can be either `stdout`, `stderr` or path to the file to write to.
      # Default: stdout
      # path: ./path/to/output.xml
      # Support extra JUnit XML fields.
      # Default: false
      extended: false
    # Prints issues in the TeamCity format.
    # teamcity:
      # Output path can be either `stdout`, `stderr` or path to the file to write to.
      # Default: stdout
      # path: ./path/to/output.txt
    # Prints issues in the SARIF format.
    # sarif:
      # Output path can be either `stdout`, `stderr` or path to the file to write to.
      # Default: stdout
      # path: ./path/to/output.json
  # Add a prefix to the output file references.
  # This option is ignored when using `output.path-mode: abs` mode.
  # Default: ""
  path-prefix: ""
  # By default, the report are related to the path obtained by `run.relative-path-mode`.
  # The mode `abs` allows to show absolute file paths instead of relative file paths.
  # The option `output.path-prefix` is ignored when using `abs` mode.
  # Default: ""
  # path-mode: "abs"
  # Order to use when sorting results.
  # Possible values: `file`, `linter`, and `severity`.
  #
  # If the severity values are inside the following list, they are ordered in this order:
  #   1. error
  #   2. warning
  #   3. high
  #   4. medium
  #   5. low
  # Either they are sorted alphabetically.
  #
  # Default: ["linter", "file"]
  sort-order:
    - linter
    - severity
    - file # filepath, line, and column.
  # Show statistics per linter.
  # Default: true
  show-stats: true

formatters:
  enable:
    # - goimports # checks if the code and import statements are formatted according to the 'goimports' command
    - golines # checks if code is formatted, and fixes long lines

    - gci # checks if code and import statements are formatted, with additional rules
    - gofmt # checks if the code is formatted according to 'gofmt' command

  # All settings can be found here https://github.com/golangci/golangci-lint/blob/HEAD/.golangci.reference.yml
  settings:
    goimports:
      # A list of prefixes, which, if set, checks import paths
      # with the given prefixes are grouped after 3rd-party packages.
      # Default: []
      local-prefixes:
        - github.com/referendumApp/referendumServices

    golines:
      # Target maximum line length.
      # Default: 100
      max-len: 120

# Linters to enable
linters:
  enable:
    - asasalint # checks for pass []any as any in variadic func(...any)
    - govet # Checks for subtle bugs and suspicious constructs that might not be caught by the compiler
    - staticcheck # Static analyzer that finds bugs, performance issues, and stylistic problems
    - revive # Replaces golint but with additional customization options
    - errcheck # Ensures that error returns from functions are checked
    - ineffassign # Detects when assignments to variables are never used
    - gomoddirectives # manages the use of 'replace', 'retract', and 'excludes' directives in go.mod
    - goconst # Finds repeated strings that could be replaced with constants
    - misspell # Finds commonly misspelled English words in comments
    - gosec # Scans code for security vulnerabilities
    - unused # Checks for unused variables, functions, constants, and types
    - errchkjson # Checks types passed to the json encoding functions
    - bodyclose # Checks whether HTTP response body is closed successfully
    - canonicalheader # checks whether net/http.Header uses canonical header
    - sqlclosecheck # Checks that sql.Rows, sql.Stmt, sqlx.NamedStmt, pgx.Query are closed
    - whitespace # Whitespace is a linter that checks for unnecessary newlines at the start and end of functions, if, for, etc
    - dupl # tool for code clone detection
    - copyloopvar # detects places where loop variables are copied (Go 1.22+)
    - errorlint # finds code that will cause problems with the error wrapping scheme introduced in Go 1.13
    - fatcontext # detects nested contexts in loops
    - forbidigo # forbids identifiers
    - gocritic # provides diagnostics that check for bugs, performance and style issues
    - iface # checks the incorrect use of interfaces, helping developers avoid interface pollution
    - musttag # enforces field tags in (un)marshaled structs
    - nestif # reports deeply nested if statements
    - nilerr # finds the code that returns nil even if it checks that the error is not nil
    - nilnesserr # reports that it checks for err != nil, but it returns a different nil value error (powered by nilness and nilerr)
    - nilnil # checks that there is no simultaneous return of nil error and an invalid value
    - noctx # finds sending http request without context.Context
    - nolintlint # reports ill-formed or insufficient nolint directives
    - recvcheck # checks for receiver type consistency
    - reassign # checks that package variables are not reassigned
    - sloglint # ensure consistent code style when using log/slog
    - rowserrcheck # checks whether Err of rows is checked successfully
    - sqlclosecheck # checks that sql.Rows and sql.Stmt are closed
    - spancheck # checks for mistakes with OpenTelemetry/Census spans
    - testpackage # makes you use a separate _test package
    - unconvert # removes unnecessary type conversions
    - usestdlibvars # detects the possibility to use variables/constants from the Go standard library

  # Linter settings
  settings:
    govet:
      enable:
        - assign # Check for useless assignments
        - bools # Check for common mistakes involving boolean operators
        - buildtag # Check //go:build and // +build directives
        - defers # Report common mistakes in defer statements
        - httpresponse # Check for mistakes using HTTP responses
        - nilfunc # Check for useless comparisons between functions and nil
        - nilness # Check for redundant or impossible nil comparisons
        - shadow # Check for possible unintended shadowing of variables
        - stringintconv # Check for string(int) conversions
        - testinggoroutine # Report calls to (*testing.T).Fatal from goroutines started by a test
        - tests # Check for common mistaken usages of tests and examples
        - unmarshal # Report passing non-pointer or non-interface values to unmarshal
        - unreachable # Check for unreachable code
        - unsafeptr # Check for invalid conversions of uintptr to unsafe.Pointer
        - unusedresult # Check for unused results of calls to some functions
        - waitgroup # Check for misuses of sync.WaitGroup
    revive:
      rules:
        - name: exported
          severity: warning
          disabled: false
    recvcheck:
      disable-builtin: true
      exclusions:
        - "*.Value"
        - "*.MarshalJSON"
    errcheck:
      check-type-assertions: true
      exclude-functions:
        - encoding/json.Marshal
        - encoding/json.MarshalIndent
    errchkjson:
      check-error-free-encoding: true
    goconst:
      min-occurrences: 3
    gocritic:
      # Settings passed to gocritic.
      # The settings key is the name of a supported gocritic checker.
      # The list of supported checkers can be found at https://go-critic.com/overview.
      settings:
        captLocal:
          # Whether to restrict checker to params only.
          # Default: true
          paramsOnly: false
        underef:
          # Whether to skip (*x).method() calls where x is a pointer receiver.
          # Default: true
          skipRecvDeref: false
    reassign:
      # Patterns for global variable names that are checked for reassignment.
      # See https://github.com/curioswitch/go-reassign#usage
      # Default: ["EOF", "Err.*"]
      patterns:
        - ".*"
    rowserrcheck:
      # database/sql is always checked.
      # Default: []
      packages:
        - github.com/jackc/pgx/v5
    sloglint:
      # Enforce not using global loggers.
      # Values:
      # - "": disabled
      # - "all": report all global loggers
      # - "default": report only the default slog logger
      # https://github.com/go-simpler/sloglint?tab=readme-ov-file#no-global
      # Default: ""
      no-global: all
      # Enforce using methods that accept a context.
      # Values:
      # - "": disabled
      # - "all": report all contextless calls
      # - "scope": report only if a context exists in the scope of the outermost function
      # https://github.com/go-simpler/sloglint?tab=readme-ov-file#context-only
      # Default: ""
      context: scope
    nestif:
      # Minimal complexity of if statements to report.
      min-complexity: 6
  exclusions:
    warn-unused: true
    presets:
      - std-error-handling
      - common-false-positives
    rules:
      - text: "should have a package comment"
        linters: [revive]
      - text: 'exported \S+ \S+ should have comment( \(or a comment on this block\))? or be unexported'
        linters: [revive]
      - text: 'package comment should be of the form ".+"'
        source: "// ?(nolint|TODO)"
        linters: [revive]
      - text: 'comment on exported \S+ \S+ should be of the form ".+"'
        source: "// ?(nolint|TODO)"
        linters: [revive, staticcheck]
      - path: '_test\.go'
        linters:
          - bodyclose
          - dupl
          - errcheck
          - goconst
          - gosec
          - noctx

# Issues configuration
issues:
  max-issues-per-linter: 0
  max-same-issues: 50
  fix: false # Set to true to automatically fix issues when possible

# Issues configuration
severity:
  default: error
  rules:
    - linters:
        - revive
        - dupl
      severity: warning
